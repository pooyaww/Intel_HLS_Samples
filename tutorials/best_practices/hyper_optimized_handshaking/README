This tutorial demonstrates the usage of the --hyper-optimized-handshaking
option of the Intel HLS Compiler i++ command.

-------------------------------------------------------------------------------
DESCRIPTION OF OPTION AND HYPER-OPTIMIZED HANDSHAKING
-------------------------------------------------------------------------------
Use the --hyper-optimized-handshaking command option to modify the handshaking
protocol used in certain areas of your design. When you enable this
optimization, the compiler adds pipeline registers to the handshaking paths of
the stallable nodes. This optimization results in a higher fMAX at the cost of
increased area and latency due to the added registers. Disabling this
optimization typically decreases area and latency at the cost of lower fMAX.

*NOTE: This option applies only to designs targeting Intel Stratix 10. If you
use this option when you target devices other than Intel Stratix 10 devices,
the compiler fails and produces an error.

-------------------------------------------------------------------------------
SUPPORTED OPTIONS: --hyper-optimized-handshaking=<auto|off>
-------------------------------------------------------------------------------
- auto: The default behavior without the option specified. The compiler
        attempts to optimize for high fMAX at the potential cost of higher area
        and increased latency

- off : The compiler attempts to optimize for lower latency at the potential
        cost of lower fMAX. Disabling hyper-optimized handshaking might also
        decrease area

-------------------------------------------------------------------------------
WHEN TO DISABLE HYPER-OPTIMIZED HANDSHAKING
-------------------------------------------------------------------------------
The option to disable hyper-optimized handshaking can be useful for smaller
designs where you are willing to sacrifice fMAX for typically lower latency and
area. If you care more about achieving a higher fMAX, keep the default option
('auto').

-------------------------------------------------------------------------------
ABOUT TUTORIAL
-------------------------------------------------------------------------------
The tutorial compiles a simple multiplier design twice:

1. with no option (equivalent to using --hyper-optimized-handshaking=auto)
2. with hyper-optimized handshaking disabled (--hyper-optimized-handshaking=off)

The design initializes NUM_TESTS (default: 1000) copies of two stallable input
streams (a and b) using rand(). Then it passes these streams to the 'mult'
component which writes the product of a and b to a stallable output stream (c).
The result is verified by comparing each product generated by the component
with the expected result.

After running the tutorial, open the HTML reports for each configuration.

Key observations:

        - The report specifies 'Hyper-Optimized Handshaking' in the function
          summary. It will be 'On' and 'Off' for the respective configuration

        - The design with hyper-optimized handshaking disabled has lower
          latency (Throughput Analysis -> Verification Statistics)

*NOTE: The 'Estimated Resource Usage' values shown in the report do not show
the final area usage. To compare the actual area as well as fMAX for the two
designs, compile them with Intel Quartus Prime. Please be patient as the 
compilations might take a very long time. Once the compilations are
finished, observe that:

        - The design with the optimization disabled consumes less area

        - The design with the optimization disabled has lower fMAX

-------------------------------------------------------------------------------
HOW TO COMPILE YOUR COMPONENT WITH INTEL QUARTUS PRIME
-------------------------------------------------------------------------------
Option 1: add "--quartus-compile" to i++ command. 
Option 2: on Linux, run: "make USERCXXFLAGS=--quartus-compile"
          on Windows, run: "build quartus-compile"

-------------------------------------------------------------------------------

This tutorial requires the following tools to be installed:
  - Intel HLS Compiler
  - ModelSim

To run this tutorial:
  - On Linux run "make"
  - On Windows run "build"
